#new session if no existing
new

set -g mouse on

# set -g default-terminal "screen-256color"
set -g default-shell /bin/zsh
set -g history-limit 10000

# set -as terminal-features ',xtermx-256color:clipboard'

# Ms modifies OSC 52 clipboard handling to work with mosh, s
# https://gist.github.com/yudai/95b20e3da66df1b066531997f982b57b
#set -ag terminal-overrides "vte*:XT:Ms=\\E]52;c;%p2%s\\7,xterm*:XT:Ms=\\E]52;c;%p2%s\\7"

# enable OSC 52 clipboard
# https://medium.freecodecamp.org/tmux-in-practice-integration-with-system-clipboard-bcd72c62ff7b
set -g set-clipboard on

set -sg escape-time 20

# THEME
set -g status-bg black
set -g status-fg white
set -g status-left-length 30
set -g status-right-length 60

#set -g status-left '#[default]'
#set -g status-right '#(uptime | cut -d "," -f2-)'

set -g renumber-windows on
set -g automatic-rename on

#Set window notifications
#setw -g monitor-activity on
#set -g visual-activity on

# So pressing C-a C-j will enter a prompt where you can select an existing
# window, and tmux will separate the current window into two panes, moving the
# selected window to the new pane. Conversely, pressing C-a C-b will break the
# current selected pane into a separate window.

bind u command-prompt -p "Join pane from:" "join-pane -h -s '%%'"
bind b break-pane -d

######################### SCREEN BINDINGS ######################

# $Id: screen-keys.conf,v 1.7 2010/07/31 11:39:13 nicm Exp $
#
# By Nicholas Marriott. Public domain.
#
# This configuration file binds many of the common GNU screen key bindings to
# appropriate tmux key bindings. Note that for some key bindings there is no
# tmux analogue and also that this set omits binding some commands available in
# tmux but not in screen.
#
# Note this is only a selection of key bindings and they are in addition to the
# normal tmux key bindings. This is intended as an example not as to be used
# as-is.

# Set the prefix to ^A.
unbind C-b
set -g prefix ^A
bind a send-prefix

# Bind appropriate commands similar to screen.
# lockscreen ^X x
unbind ^X
bind ^X lock-server
unbind x
bind x lock-server

# screen ^C c
unbind ^C
bind ^C new-window
bind c new-window

# detach ^D d
unbind ^D
bind ^D detach

# displays *
unbind *
bind * list-clients

# next ^@ ^N sp n
unbind ^@
bind ^@ next-window
unbind ^N
bind ^N next-window
unbind " "
bind " " next-window
unbind n
bind n next-window

# title A
unbind A
bind A command-prompt "rename-window %%"

unbind /
bind-key / command-prompt "swap-window -t %%"

# other ^A
unbind ^A
bind ^A last-window

# prev ^H ^P p ^?
unbind ^H
bind ^H previous-window
unbind ^P
bind ^P previous-window
unbind p
bind p previous-window
unbind BSpace
bind BSpace previous-window

# windows ^W w
unbind ^W
bind ^W list-windows
unbind w
bind w list-windows

# kill K k
unbind K
bind K confirm-before "kill-window"

# redisplay ^L l
unbind ^L
bind ^L refresh-client

# split -v |
unbind |
bind | split-window

# :kB: focus up
unbind Tab
bind Tab select-pane -t:.+
unbind BTab
bind BTab select-pane -t:.-

# " windowlist -b
unbind '"'
bind '"' choose-window

# vi bindings
set-window-option -g mode-keys vi
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Vim copy mode bindings
unbind p
bind p paste-buffer
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel
